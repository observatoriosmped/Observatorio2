(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-page-scroll-core', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-page-scroll-core'] = {}, global.ng.core));
}(this, (function (exports, i0) { 'use strict';

    /**
     * Represents a scrolling action
     */
    var PageScrollInstance = /** @class */ (function () {
        /**
         * Private constructor, requires the properties assumed to be the bare minimum.
         * Use the factory methods to create instances:
         *      {@link PageScrollService#create}
         */
        function PageScrollInstance(pageScrollOptions) {
            /**
             * These properties will be set/manipulated if the scroll animation starts
             */
            /* The initial value of the scrollTop or scrollLeft position when the animation starts */
            this.startScrollPosition = 0;
            /* Whether an interrupt listener is attached to the body or not */
            this.interruptListenersAttached = false;
            /* References to the timer instance that is used to perform the scroll animation to be
             able to clear it on animation end*/
            this.timer = null;
            if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {
                pageScrollOptions.scrollViews = [
                    pageScrollOptions.document.documentElement,
                    pageScrollOptions.document.body,
                    pageScrollOptions.document.body.parentNode,
                ];
                this.isInlineScrolling = false;
            }
            else {
                this.isInlineScrolling = true;
            }
            this.pageScrollOptions = pageScrollOptions;
        }
        PageScrollInstance.getScrollingTargetPosition = function (pageScrollOptions, scrollTargetElement) {
            var body = pageScrollOptions.document.body;
            var docEl = pageScrollOptions.document.documentElement;
            var windowPageYOffset = pageScrollOptions.document.defaultView &&
                pageScrollOptions.document.defaultView.pageYOffset || undefined;
            var windowPageXOffset = pageScrollOptions.document.defaultView &&
                pageScrollOptions.document.defaultView.pageXOffset || undefined;
            var scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;
            var scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;
            var clientTop = docEl.clientTop || body.clientTop || 0;
            var clientLeft = docEl.clientLeft || body.clientLeft || 0;
            if (scrollTargetElement === undefined || scrollTargetElement === null) {
                // No element found, so return the current position to not cause any change in scroll position
                return { top: scrollTop, left: scrollLeft };
            }
            var box = scrollTargetElement.getBoundingClientRect();
            var top = box.top + scrollTop - clientTop;
            var left = box.left + scrollLeft - clientLeft;
            return { top: Math.round(top), left: Math.round(left) };
        };
        PageScrollInstance.getInlineScrollingTargetPosition = function (pageScrollOptions, scrollTargetElement) {
            var position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };
            if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {
                var accumulatedParentsPos = { top: 0, left: 0 };
                // not named window to make sure we're not getting the global window variable by accident
                var theWindow = scrollTargetElement.ownerDocument.defaultView;
                var parentFound = false;
                // Start parent is the immediate parent
                var parent = scrollTargetElement.parentElement;
                // Iterate upwards all parents
                while (!parentFound && parent !== undefined && parent !== null) {
                    if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {
                        accumulatedParentsPos.top += parent.offsetTop;
                        accumulatedParentsPos.left += parent.offsetLeft;
                    }
                    // Next iteration
                    parent = parent.parentElement;
                    parentFound = parent === pageScrollOptions.scrollViews[0];
                }
                if (parentFound) {
                    // Only use the results if we found the parent, otherwise we accumulated too much anyway
                    position.top += accumulatedParentsPos.top;
                    position.left += accumulatedParentsPos.left;
                }
                else {
                    /* TODO Uncomment
                    if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {
                      console.warn('Unable to find nested scrolling targets parent!');
                    }*/
                }
            }
            return position;
        };
        PageScrollInstance.prototype.getScrollPropertyValue = function (scrollingView) {
            if (!this.pageScrollOptions.verticalScrolling) {
                return scrollingView.scrollLeft;
            }
            return scrollingView.scrollTop;
        };
        PageScrollInstance.prototype.getScrollClientPropertyValue = function (scrollingView) {
            if (!this.pageScrollOptions.verticalScrolling) {
                return scrollingView.clientWidth;
            }
            return scrollingView.clientHeight;
        };
        /**
         * Extract the exact location of the scrollTarget element.
         *
         * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
         * a string like "#heading2", then this method returns the corresponding DOM element for that id.
         *
         */
        PageScrollInstance.prototype.extractScrollTargetPosition = function () {
            var scrollTargetElement = this.getScrollTargetElement();
            if (scrollTargetElement === null || scrollTargetElement === undefined) {
                // Scroll target not found
                return { top: NaN, left: NaN };
            }
            if (this.isInlineScrolling) {
                return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
            }
            return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
        };
        /**
         * Get the top offset of the scroll animation.
         * This automatically takes the offset location of the scrolling container/scrolling view
         * into account (for nested/inline scrolling).
         */
        PageScrollInstance.prototype.getCurrentOffset = function () {
            return this.pageScrollOptions.scrollOffset;
        };
        /**
         * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
         * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
         *          false if it failed for all ScrollViews, meaning that we should stop the animation
         *          (probably because we're at the end of the scrolling region)
         */
        PageScrollInstance.prototype.setScrollPosition = function (position) {
            var _this = this;
            // Set the new scrollTop/scrollLeft to all scrollViews elements
            return this.pageScrollOptions.scrollViews.reduce(function (oneAlreadyWorked, scrollingView) {
                var startScrollPropertyValue = _this.getScrollPropertyValue(scrollingView);
                if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {
                    var scrollDistance = Math.abs(startScrollPropertyValue - position);
                    // The movement we need to perform is less than 2px
                    // This we consider a small movement which some browser may not perform when
                    // changing the scrollTop/scrollLeft property
                    // Thus in this cases we do not stop the scroll animation, although setting the
                    // scrollTop/scrollLeft value "fails"
                    var isSmallMovement = scrollDistance < _this.pageScrollOptions._minScrollDistance;
                    if (!_this.pageScrollOptions.verticalScrolling) {
                        scrollingView.scrollLeft = position;
                    }
                    else {
                        scrollingView.scrollTop = position;
                    }
                    // Return true if setting the new scrollTop/scrollLeft value worked
                    // We consider that it worked if the new scrollTop/scrollLeft value is closer to the
                    // desired scrollTop/scrollLeft than before (it might not be exactly the value we
                    // set due to dpi or rounding irregularities)
                    if (isSmallMovement || scrollDistance > Math.abs(_this.getScrollPropertyValue(scrollingView) - position)) {
                        return true;
                    }
                }
                return oneAlreadyWorked;
            }, false);
        };
        /**
         * Trigger firing a animation finish event
         * @param value Whether the animation finished at the target (true) or got interrupted (false)
         */
        PageScrollInstance.prototype.fireEvent = function (value) {
            if (this.pageScrollOptions.scrollFinishListener) {
                this.pageScrollOptions.scrollFinishListener.emit(value);
            }
        };
        /**
         * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
         * will be called if any of the attached events is fired.
         *
         * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
         */
        PageScrollInstance.prototype.attachInterruptListeners = function (interruptReporter) {
            var _this = this;
            if (this.interruptListenersAttached) {
                // Detach possibly existing listeners first
                this.detachInterruptListeners();
            }
            this.interruptListener = function (event) {
                interruptReporter.report(event, _this);
            };
            this.pageScrollOptions.interruptEvents.forEach(function (event) { return _this.pageScrollOptions.document.body.addEventListener(event, _this.interruptListener); });
            this.interruptListenersAttached = true;
        };
        /**
         * Remove event listeners from the body and stop listening for events that might be treated as "animation
         * interrupt" events.
         */
        PageScrollInstance.prototype.detachInterruptListeners = function () {
            var _this = this;
            this.pageScrollOptions.interruptEvents.forEach(function (event) { return _this.pageScrollOptions.document.body.removeEventListener(event, _this.interruptListener); });
            this.interruptListenersAttached = false;
        };
        PageScrollInstance.prototype.getScrollTargetElement = function () {
            if (typeof this.pageScrollOptions.scrollTarget === 'string') {
                var targetSelector = this.pageScrollOptions.scrollTarget;
                if (targetSelector.match(/^#[^\s]+$/g) !== null) {
                    // It's an id selector and a valid id, as it does not contain any white space characters
                    return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));
                }
                return this.pageScrollOptions.document.querySelector(targetSelector);
            }
            return this.pageScrollOptions.scrollTarget;
        };
        return PageScrollInstance;
    }());

    var NGXPS_CONFIG = new i0.InjectionToken('ngxps_config');
    var ɵ0 = function (t, b, c, d) {
        // Linear easing
        return c * t / d + b;
    };
    var defaultPageScrollConfig = {
        _interval: 10,
        _minScrollDistance: 2,
        _logLevel: 1,
        namespace: 'default',
        verticalScrolling: true,
        duration: 1250,
        scrollOffset: 0,
        advancedInlineOffsetCalculation: false,
        interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],
        interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],
        interruptible: true,
        scrollInView: true,
        easingLogic: ɵ0,
    };

    var PageScrollService = /** @class */ (function () {
        function PageScrollService(customConfig) {
            var _this = this;
            this.runningInstances = [];
            this.onInterrupted = {
                report: function (event, pageScrollInstance) {
                    if (!pageScrollInstance.pageScrollOptions.interruptible) {
                        // Non-interruptible anyway, so do not stop anything
                        return;
                    }
                    var shouldStop = true;
                    if (event.type === 'keyup') {
                        // Only stop if specific keys have been pressed, for all others don't stop anything
                        if (_this.config.interruptKeys.indexOf(event.key) === -1) {
                            // The pressed key is not in the list of interrupting keys
                            shouldStop = false;
                        }
                    }
                    else if (event.type === 'mousedown') {
                        // For mousedown events we only stop the scroll animation of the mouse has
                        // been clicked inside the scrolling container
                        if (!pageScrollInstance.pageScrollOptions.scrollViews.some(function (scrollingView) { return scrollingView.contains(event.target); })) {
                            // Mouse clicked an element which is not inside any of the the scrolling containers
                            shouldStop = false;
                        }
                    }
                    if (shouldStop) {
                        _this.stopAll(pageScrollInstance.pageScrollOptions.namespace);
                    }
                },
            };
            this.config = Object.assign(Object.assign({}, defaultPageScrollConfig), customConfig);
        }
        PageScrollService.prototype.stopInternal = function (interrupted, pageScrollInstance) {
            var index = this.runningInstances.indexOf(pageScrollInstance);
            if (index >= 0) {
                this.runningInstances.splice(index, 1);
            }
            if (pageScrollInstance.interruptListenersAttached) {
                pageScrollInstance.detachInterruptListeners();
            }
            if (pageScrollInstance.timer) {
                // Clear/Stop the timer
                clearInterval(pageScrollInstance.timer);
                // Clear the reference to this timer
                pageScrollInstance.timer = undefined;
                pageScrollInstance.fireEvent(!interrupted);
                return true;
            }
            return false;
        };
        PageScrollService.prototype.create = function (options) {
            return new PageScrollInstance(Object.assign(Object.assign({}, this.config), options));
        };
        /**
         * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.
         *
         * This is the core functionality of the whole library.
         */
        // tslint:disable-next-line:cyclomatic-complexity
        PageScrollService.prototype.start = function (pageScrollInstance) {
            var _this = this;
            // Merge the default options in the pageScrollInstance options
            pageScrollInstance.pageScrollOptions = Object.assign(Object.assign({}, this.config), pageScrollInstance.pageScrollOptions);
            // Stop all possibly running scroll animations in the same namespace
            this.stopAll(pageScrollInstance.pageScrollOptions.namespace);
            if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {
                // No scrollViews specified, thus we can't animate anything
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && i0.isDevMode())) {
                    console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');
                }
                return;
            }
            var startScrollPositionFound = false;
            var scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);
            // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next
            pageScrollInstance.startScrollPosition = 0;
            // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)
            pageScrollInstance.pageScrollOptions.scrollViews.forEach(function (scrollingView) {
                if (scrollingView === undefined || scrollingView === null) {
                    return;
                }
                // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its "scrollTop"
                // or "scrollLeft" property that is not undefined and unequal to 0
                var scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);
                if (!startScrollPositionFound && scrollPosition) {
                    // We found a scrollingView that does not have scrollTop or scrollLeft 0
                    // Return the scroll position value, as this will be our startScrollPosition
                    pageScrollInstance.startScrollPosition = scrollPosition;
                    startScrollPositionFound = true;
                    // Remember te scrollRange of this scrollingView
                    scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);
                }
            });
            var pageScrollOffset = pageScrollInstance.getCurrentOffset();
            // Calculate the target position that the scroll animation should go to
            var scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();
            pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);
            // Calculate the distance we need to go in total
            pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;
            if (isNaN(pageScrollInstance.distanceToScroll)) {
                // We weren't able to find the target position, maybe the element does not exist?
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && i0.isDevMode())) {
                    console.log('Scrolling not possible, as we can\'t find the specified target');
                }
                pageScrollInstance.fireEvent(false);
                return;
            }
            // We're at the final destination already
            // OR we need to scroll down but are already at the end
            // OR we need to scroll up but are at the top already
            var allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;
            // Check how long we need to scroll if a speed option is given
            // Default executionDuration is the specified duration
            pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;
            // Maybe we need to pay attention to the speed option?
            if ((pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null) &&
                (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {
                // Speed option is set and no duration => calculate duration based on speed and scroll distance
                pageScrollInstance.executionDuration =
                    Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;
            }
            // We should go there directly, as our "animation" would have one big step
            // only anyway and this way we save the interval stuff
            var tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;
            if (allReadyAtDestination || tooShortInterval) {
                if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && i0.isDevMode())) {
                    if (allReadyAtDestination) {
                        console.log('Scrolling not possible, as we can\'t get any closer to the destination');
                    }
                    else {
                        console.log('Scroll duration shorter that interval length, jumping to target');
                    }
                }
                pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);
                pageScrollInstance.fireEvent(true);
                return;
            }
            if (!pageScrollInstance.pageScrollOptions.scrollInView) {
                var alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition &&
                    pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;
                if (alreadyInView) {
                    if (this.config._logLevel >= 2 || (this.config._logLevel >= 1 && i0.isDevMode())) {
                        console.log('Not scrolling, as target already in view');
                    }
                    pageScrollInstance.fireEvent(true);
                    return;
                }
            }
            // Register the interrupt listeners if we want an interruptible scroll animation
            if (pageScrollInstance.pageScrollOptions.interruptible) {
                pageScrollInstance.attachInterruptListeners(this.onInterrupted);
            }
            // Let's get started, get the start time...
            pageScrollInstance.startTime = new Date().getTime();
            // .. and calculate the end time (when we need to finish at last)
            pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;
            pageScrollInstance.timer = setInterval(function (instance) {
                // Take the current time
                var currentTime = new Date().getTime();
                // Determine the new scroll position
                var newScrollPosition;
                var stopNow = false;
                if (instance.endTime <= currentTime) {
                    // We're over the time already, so go the targetScrollPosition (aka destination)
                    newScrollPosition = instance.targetScrollPosition;
                    stopNow = true;
                }
                else {
                    // Calculate the scroll position based on the current time using the easing function
                    newScrollPosition = Math.round(instance.pageScrollOptions.easingLogic(currentTime - instance.startTime, instance.startScrollPosition, instance.distanceToScroll, instance.executionDuration));
                }
                if (_this.config._logLevel >= 5 && i0.isDevMode()) {
                    console.warn('Scroll Position: ' + newScrollPosition);
                }
                // Set the new scrollPosition to all scrollViews elements
                if (!instance.setScrollPosition(newScrollPosition)) {
                    // Setting the new scrollTop/scrollLeft value failed for all ScrollViews
                    // early stop the scroll animation to save resources
                    stopNow = true;
                }
                // At the end do the internal stop maintenance and fire the pageScrollFinish event
                // (otherwise the event might arrive at "too early")
                if (stopNow) {
                    _this.stopInternal(false, instance);
                }
            }, this.config._interval, pageScrollInstance);
            // Register the instance as running one
            this.runningInstances.push(pageScrollInstance);
        };
        PageScrollService.prototype.scroll = function (options) {
            this.start(this.create(options));
        };
        /**
         * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.
         */
        PageScrollService.prototype.stopAll = function (namespace) {
            if (this.runningInstances.length > 0) {
                var stoppedSome = false;
                for (var i = 0; i < this.runningInstances.length; ++i) {
                    var pageScrollInstance = this.runningInstances[i];
                    if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {
                        stoppedSome = true;
                        this.stopInternal(true, pageScrollInstance);
                        // Decrease the counter, as we removed an item from the array we iterate over
                        i--;
                    }
                }
                return stoppedSome;
            }
            return false;
        };
        PageScrollService.prototype.stop = function (pageScrollInstance) {
            return this.stopInternal(true, pageScrollInstance);
        };
        return PageScrollService;
    }());
    PageScrollService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageScrollService_Factory() { return new PageScrollService(i0.ɵɵinject(NGXPS_CONFIG)); }, token: PageScrollService, providedIn: "root" });
    PageScrollService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PageScrollService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [NGXPS_CONFIG,] }] }
    ]; };

    var ɵ0$1 = {};
    var NgxPageScrollCoreModule = /** @class */ (function () {
        function NgxPageScrollCoreModule() {
        }
        NgxPageScrollCoreModule.forRoot = function (config) {
            return {
                ngModule: NgxPageScrollCoreModule,
                providers: [PageScrollService, { provide: NGXPS_CONFIG, useValue: config }],
            };
        };
        return NgxPageScrollCoreModule;
    }());
    NgxPageScrollCoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        PageScrollService,
                        { provide: NGXPS_CONFIG, useValue: ɵ0$1 },
                    ],
                },] }
    ];

    /*
     * Public API Surface of ngx-page-scroll-core
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NGXPS_CONFIG = NGXPS_CONFIG;
    exports.NgxPageScrollCoreModule = NgxPageScrollCoreModule;
    exports.PageScrollInstance = PageScrollInstance;
    exports.PageScrollService = PageScrollService;
    exports.defaultPageScrollConfig = defaultPageScrollConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-page-scroll-core.umd.js.map
