import * as ɵngcc0 from '@angular/core';
var SweetAlert2Module_1;
import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalPortalDirective } from './swal-portal.directive';
import { SwalComponent } from './swal.component';
import { SwalDirective } from './swal.directive';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
export function provideDefaultSwal() {
    return import('sweetalert2');
}
let SweetAlert2Module = SweetAlert2Module_1 = class SweetAlert2Module {
    static forRoot(options = {}) {
        return {
            ngModule: SweetAlert2Module_1,
            providers: [
                SweetAlert2LoaderService,
                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },
                { provide: fireOnInitToken, useValue: options.fireOnInit || false },
                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }
            ]
        };
    }
    static forChild(options = {}) {
        return {
            ngModule: SweetAlert2Module_1,
            providers: [
                ...options.provideSwal ? [
                    SweetAlert2LoaderService,
                    { provide: swalProviderToken, useValue: options.provideSwal }
                ] : [],
                ...options.fireOnInit !== undefined ? [
                    { provide: fireOnInitToken, useValue: options.fireOnInit }
                ] : [],
                ...options.dismissOnDestroy !== undefined ? [
                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }
                ] : []
            ]
        };
    }
};
SweetAlert2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SweetAlert2Module });
SweetAlert2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SweetAlert2Module_Factory(t) { return new (t || SweetAlert2Module)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, { declarations: function () { return [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwalComponent, SwalPortalDirective, SwalDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{
        type: NgModule,
        args: [{
                declarations: [
                    SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    SwalComponent, SwalPortalDirective, SwalDirective
                ],
                entryComponents: [
                    SwalComponent, SwalPortalComponent
                ]
            }]
    }], null, null); })();
export { SweetAlert2Module };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDIubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi9saWIvc3dlZXRhbGVydDIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFnQix3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUXRGLE1BQU0sVUFBVSxrQkFBa0I7SUFDOUIsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQWdCRCxJQUFhLGlCQUFpQix5QkFBOUIsTUFBYSxpQkFBaUI7SUFDbkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFtQyxFQUFFO1FBQ3ZELE9BQU87WUFDSCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDUCx3QkFBd0I7Z0JBQ3hCLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxJQUFJLGtCQUFrQixFQUFFO2dCQUNuRixFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksS0FBSyxFQUFFO2dCQUNuRSxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTthQUNqRjtTQUNKLENBQUM7SUFDTixDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFtQyxFQUFFO1FBQ3hELE9BQU87WUFDSCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDUCxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO29CQUNyQix3QkFBd0I7b0JBQ3hCLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxFQUFFO2lCQUNoRSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNOLEdBQUcsT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNsQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxVQUFVLEVBQUU7aUJBQzdELENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ04sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDeEMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtpQkFDekUsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUNUO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSjs7OztFQUFBLENBOUJZO0tBQWlCLDBDQWQ3QixRQUFRLENBQUMsVUFDTixZQUFZLEVBQUUsY0FDVixhQUFhLEVBQUUsYUFBYSxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixVQUN6RSxVQUNELE9BQU8sRUFBRSxjQUNMLFlBQVksVUFDZixVQUNELE9BQU8sRUFBRSxjQUNMLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLFVBQ3BELFVBQ0QsZUFBZSxFQUFFLGNBQ2I7TUFBYSxFQUFFLG1CQUFtQixVQUNyQyxNQUNKLENBQUMsSUFDVyxpQkFBaUIsQ0E4QjdCOzs7Ozs7Ozs7Ozs7Ozs7OzBCQUNEO1NBL0JhLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZGlzbWlzc09uRGVzdHJveVRva2VuLCBmaXJlT25Jbml0VG9rZW4sIHN3YWxQcm92aWRlclRva2VuIH0gZnJvbSAnLi9kaSc7XG5pbXBvcnQgeyBTd2FsUG9ydGFsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLXBvcnRhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dhbFBvcnRhbERpcmVjdGl2ZSB9IGZyb20gJy4vc3dhbC1wb3J0YWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN3YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwuY29tcG9uZW50JztcbmltcG9ydCB7IFN3YWxEaXJlY3RpdmUgfSBmcm9tICcuL3N3YWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN3YWxQcm92aWRlciwgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3dlZXRhbGVydDJNb2R1bGVDb25maWcge1xuICAgIHByb3ZpZGVTd2FsPzogU3dhbFByb3ZpZGVyO1xuICAgIGZpcmVPbkluaXQ/OiBib29sZWFuO1xuICAgIGRpc21pc3NPbkRlc3Ryb3k/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZURlZmF1bHRTd2FsKCkge1xuICAgIHJldHVybiBpbXBvcnQoJ3N3ZWV0YWxlcnQyJyk7XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIFN3YWxEaXJlY3RpdmUsIFN3YWxDb21wb25lbnQsIFN3YWxQb3J0YWxEaXJlY3RpdmUsIFN3YWxQb3J0YWxDb21wb25lbnRcbiAgICBdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFN3YWxDb21wb25lbnQsIFN3YWxQb3J0YWxEaXJlY3RpdmUsIFN3YWxEaXJlY3RpdmVcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgICAgICBTd2FsQ29tcG9uZW50LCBTd2FsUG9ydGFsQ29tcG9uZW50XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBTd2VldEFsZXJ0Mk1vZHVsZSB7XG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IFN3ZWV0YWxlcnQyTW9kdWxlQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFN3ZWV0QWxlcnQyTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogU3dlZXRBbGVydDJNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBzd2FsUHJvdmlkZXJUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMucHJvdmlkZVN3YWwgfHwgcHJvdmlkZURlZmF1bHRTd2FsIH0sXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBmaXJlT25Jbml0VG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLmZpcmVPbkluaXQgfHwgZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSB8fCB0cnVlIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGZvckNoaWxkKG9wdGlvbnM6IFN3ZWV0YWxlcnQyTW9kdWxlQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFN3ZWV0QWxlcnQyTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogU3dlZXRBbGVydDJNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnByb3ZpZGVTd2FsID8gW1xuICAgICAgICAgICAgICAgICAgICBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogc3dhbFByb3ZpZGVyVG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLnByb3ZpZGVTd2FsIH1cbiAgICAgICAgICAgICAgICBdIDogW10sXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5maXJlT25Jbml0ICE9PSB1bmRlZmluZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogZmlyZU9uSW5pdFRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5maXJlT25Jbml0IH1cbiAgICAgICAgICAgICAgICBdIDogW10sXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5kaXNtaXNzT25EZXN0cm95ICE9PSB1bmRlZmluZWQgPyBbXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogZGlzbWlzc09uRGVzdHJveVRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5kaXNtaXNzT25EZXN0cm95IH1cbiAgICAgICAgICAgICAgICBdIDogW11cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=