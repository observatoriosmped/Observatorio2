import { ComponentFactoryResolver, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';
import { SwalComponent } from './swal.component';
/**
 * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:
 *
 * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:
 *
 *    <button [swal]="['Title', 'Text']">Click me</button>
 *
 * 2) A native SweetAlert2 options object, ex:
 *
 *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
 *
 * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
 *
 *    <button [swal]="mySwal">Click me</button>
 *    <swal #mySwal title="Title" text="Text"></swal>
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwalDirective implements OnInit, OnDestroy {
    private readonly viewContainerRef;
    private readonly resolver;
    /**
     * SweetAlert2 options or a SwalComponent instance.
     * See the class doc block for more informations.
     */
    set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions);
    /**
     * Emits when the user clicks "Confirm".
     * Bears a value when using "input", resolved "preConfirm", etc.
     *
     * Example:
     *     <swal (confirm)="handleConfirm($event)"></swal>
     *
     *     public handleConfirm(email: string): void {
     *         // ... save user email
     *     }
     */
    readonly confirm: EventEmitter<any>;
    /**
     * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.
     * The reason is `undefined` when {@link dismiss} is called.
     *
     * Example:
     *     <swal (cancel)="handleCancel($event)"></swal>
     *
     *     public handleCancel(reason: DismissReason | undefined): void {
     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
     *         // ... do something
     *     }
     */
    readonly cancel: EventEmitter<Swal.DismissReason | undefined>;
    /**
     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object
     * options to it.
     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.
     */
    private swalRef?;
    /**
     * An instance of the <swal> component that this directive controls.
     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.
     */
    private swalInstance?;
    /**
     * Holds the native SweetAlert2 options.
     * Empty when the user passed an existing SwalComponent instance.
     */
    private swalOptions?;
    constructor(viewContainerRef: ViewContainerRef, resolver: ComponentFactoryResolver);
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     */
    ngOnInit(): void;
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent.
     */
    ngOnDestroy(): void;
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     */
    onClick(event: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SwalDirective, "[swal]", never, {
    "swal": "swal";
}, {
    "confirm": "confirm";
    "cancel": "cancel";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic3dhbC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9FQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IFN3YWwsIHsgU3dlZXRBbGVydEFycmF5T3B0aW9ucywgU3dlZXRBbGVydE9wdGlvbnMgfSBmcm9tICdzd2VldGFsZXJ0Mic7XG5pbXBvcnQgeyBTd2FsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLmNvbXBvbmVudCc7XG4vKipcbiAqIFtzd2FsXSBkaXJlY3RpdmUuIEl0IHRha2VzIGEgdmFsdWUgdGhhdCBkZWZpbmVzIHRoZSBTd2VldEFsZXJ0IGFuZCBjYW4gYmUgb2YgdGhyZWUgdHlwZXM6XG4gKlxuICogMSkgQSBzaW1wbGUgYXJyYXkgb2YgdHdvIG9yIHRocmVlIHN0cmluZ3MgZGVmaW5pbmcgW3RpdGxlLCB0ZXh0LCBpY29uXSAtIHRoZSBpY29uIGJlaW5nIG9wdGlvbmFsLCBleDpcbiAqXG4gKiAgICA8YnV0dG9uIFtzd2FsXT1cIlsnVGl0bGUnLCAnVGV4dCddXCI+Q2xpY2sgbWU8L2J1dHRvbj5cbiAqXG4gKiAyKSBBIG5hdGl2ZSBTd2VldEFsZXJ0MiBvcHRpb25zIG9iamVjdCwgZXg6XG4gKlxuICogICAgPGJ1dHRvbiBbc3dhbF09XCJ7IHRpdGxlOiAnVGl0bGUnLCB0ZXh0OiAnVGV4dCcgfVwiPkNsaWNrIG1lPC9idXR0b24+XG4gKlxuICogMykgQSByZWZlcmVuY2UgdG8gYW4gZXhpc3RpbmcgU3dhbENvbXBvbmVudCBpbnN0YW5jZSBmb3IgbW9yZSBhZHZhbmNlZCB1c2VzLCBleDpcbiAqXG4gKiAgICA8YnV0dG9uIFtzd2FsXT1cIm15U3dhbFwiPkNsaWNrIG1lPC9idXR0b24+XG4gKiAgICA8c3dhbCAjbXlTd2FsIHRpdGxlPVwiVGl0bGVcIiB0ZXh0PVwiVGV4dFwiPjwvc3dhbD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3dhbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvbHZlcjtcbiAgICAvKipcbiAgICAgKiBTd2VldEFsZXJ0MiBvcHRpb25zIG9yIGEgU3dhbENvbXBvbmVudCBpbnN0YW5jZS5cbiAgICAgKiBTZWUgdGhlIGNsYXNzIGRvYyBibG9jayBmb3IgbW9yZSBpbmZvcm1hdGlvbnMuXG4gICAgICovXG4gICAgc2V0IHN3YWwob3B0aW9uczogU3dhbENvbXBvbmVudCB8IFN3ZWV0QWxlcnRPcHRpb25zIHwgU3dlZXRBbGVydEFycmF5T3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogRW1pdHMgd2hlbiB0aGUgdXNlciBjbGlja3MgXCJDb25maXJtXCIuXG4gICAgICogQmVhcnMgYSB2YWx1ZSB3aGVuIHVzaW5nIFwiaW5wdXRcIiwgcmVzb2x2ZWQgXCJwcmVDb25maXJtXCIsIGV0Yy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogICAgIDxzd2FsIChjb25maXJtKT1cImhhbmRsZUNvbmZpcm0oJGV2ZW50KVwiPjwvc3dhbD5cbiAgICAgKlxuICAgICAqICAgICBwdWJsaWMgaGFuZGxlQ29uZmlybShlbWFpbDogc3RyaW5nKTogdm9pZCB7XG4gICAgICogICAgICAgICAvLyAuLi4gc2F2ZSB1c2VyIGVtYWlsXG4gICAgICogICAgIH1cbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maXJtOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIkNhbmNlbFwiLCBvciBkaXNtaXNzZXMgdGhlIG1vZGFsIGJ5IGFueSBvdGhlciBhbGxvd2VkIHdheS5cbiAgICAgKiBCeSBkZWZhdWx0LCBpdCB3aWxsIGVtaXQgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZWFzb24gZm9yIHdoaWNoIHRoZSBTd2VldEFsZXJ0IGhhcyBiZWVuIGNsb3NlZC5cbiAgICAgKiBUaGUgcmVhc29uIGlzIGB1bmRlZmluZWRgIHdoZW4ge0BsaW5rIGRpc21pc3N9IGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogICAgIDxzd2FsIChjYW5jZWwpPVwiaGFuZGxlQ2FuY2VsKCRldmVudClcIj48L3N3YWw+XG4gICAgICpcbiAgICAgKiAgICAgcHVibGljIGhhbmRsZUNhbmNlbChyZWFzb246IERpc21pc3NSZWFzb24gfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICAgKiAgICAgICAgIC8vIHJlYXNvbiBjYW4gYmUgJ2NhbmNlbCcsICdvdmVybGF5JywgJ2Nsb3NlJywgJ3RpbWVyJyBvciB1bmRlZmluZWQuXG4gICAgICogICAgICAgICAvLyAuLi4gZG8gc29tZXRoaW5nXG4gICAgICogICAgIH1cbiAgICAgKi9cbiAgICByZWFkb25seSBjYW5jZWw6IEV2ZW50RW1pdHRlcjxTd2FsLkRpc21pc3NSZWFzb24gfCB1bmRlZmluZWQ+O1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHVzZXIgZG9lcyBub3QgcHJvdmlkZXMgYSBTd2FsQ29tcG9uZW50IGluc3RhbmNlLCB3ZSBjcmVhdGUgaXQgb24tdGhlLWZseSBhbmQgYXNzaWduIHRoZSBwbGFpbi1vYmplY3RcbiAgICAgKiBvcHRpb25zIHRvIGl0LlxuICAgICAqIFRoaXMgZmllbGRzIGtlZXBzIGEgcmVmZXJlbmNlIHRvIHRoZSBkeW5hbWljYWxseS1jcmVhdGVkIDxzd2FsPiwgdG8gZGVzdHJveSBpdCBhbG9uZyB0aGlzIGRpcmVjdGl2ZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN3YWxSZWY/O1xuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoZSA8c3dhbD4gY29tcG9uZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgY29udHJvbHMuXG4gICAgICogQ291bGQgYmUgYW4gaW5zdGFuY2UgcGFzc2VkIGJ5IHRoZSB1c2VyLCBvdGhlcndpc2UgaXQncyB0aGUgaW5zdGFuY2Ugd2UndmUgZHluYW1pY2FsbHkgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN3YWxJbnN0YW5jZT87XG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIG5hdGl2ZSBTd2VldEFsZXJ0MiBvcHRpb25zLlxuICAgICAqIEVtcHR5IHdoZW4gdGhlIHVzZXIgcGFzc2VkIGFuIGV4aXN0aW5nIFN3YWxDb21wb25lbnQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzd2FsT3B0aW9ucz87XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcik7XG4gICAgLyoqXG4gICAgICogT25Jbml0IGxpZmVjeWNsZSBoYW5kbGVyLlxuICAgICAqIENyZWF0ZXMgYSBTd2FsQ29tcG9uZW50IGluc3RhbmNlIGlmIHRoZSB1c2VyIGRpZG4ndCBwcm92aWRlZCBvbmUgYW5kIGJpbmRzIG9uIHRoYXQgY29tcG9uZW50IChjb25maXJtKSBhbmRcbiAgICAgKiAoY2FuY2VsKSBvdXRwdXRzIHRvIHJlZW1pdCBvbiB0aGUgZGlyZWN0aXZlLlxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT25EZXN0cm95IGxpZmVjeWNsZSBoYW5kbGVyLlxuICAgICAqIERlc3Ryb3lzIHRoZSBkeW5hbWljYWxseS1jcmVhdGVkIFN3YWxDb21wb25lbnQuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGljayBoYW5kbGVyLlxuICAgICAqIFRoZSBkaXJlY3RpdmUgbGlzdGVucyBmb3Igb25jbGljayBldmVudHMgb24gaXRzIGhvc3QgZWxlbWVudC5cbiAgICAgKiBXaGVuIHRoaXMgaGFwcGVucywgaXQgc2hvd3MgdGhlIDxzd2FsPiBhdHRhY2hlZCB0byB0aGlzIGRpcmVjdGl2ZS5cbiAgICAgKi9cbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbn1cbiJdfQ==