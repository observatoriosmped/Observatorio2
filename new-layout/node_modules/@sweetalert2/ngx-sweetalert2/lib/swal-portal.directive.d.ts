import { ApplicationRef, ComponentFactoryResolver, Injector, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';
import { SwalComponent } from './swal.component';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * A structural directive that lets you use Angular templates inside of SweetAlerts.
 * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but
 * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.
 * The default target is the alert text content zone.
 *
 * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):
 *
 *     @Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPortalTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPortal [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPortal="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwalPortalDirective implements OnInit, OnDestroy {
    private readonly resolver;
    private readonly injector;
    private readonly app;
    private readonly templateRef;
    private readonly sweetAlert2Loader;
    private readonly swalTargets;
    private readonly swalComponent;
    /**
     * Takes a portal target or nothing (then it will target the text content zone by default).
     *
     * See the {@link SwalPortalTargets} service to see the available targets.
     * See the class doc block for more informations.
     */
    target?: SwalPortalTarget;
    /**
     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.
     */
    private portalComponentRef?;
    private readonly destroyed;
    constructor(resolver: ComponentFactoryResolver, injector: Injector, app: ApplicationRef, templateRef: TemplateRef<any>, sweetAlert2Loader: SweetAlert2LoaderService, swalTargets: SwalPortalTargets, swalComponent: SwalComponent);
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     */
    ngOnInit(): void;
    /**
     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     */
    ngOnDestroy(): void;
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     */
    private renderHook;
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     */
    private beforeOpenHook;
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     */
    private destroyHook;
    /**
     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
     */
    private createPortalComponent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalPortalDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SwalPortalDirective, "[swalPortal]", never, {
    "target": "swalPortal";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInN3YWwtcG9ydGFsLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1EQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN3YWxQb3J0YWxUYXJnZXQsIFN3YWxQb3J0YWxUYXJnZXRzIH0gZnJvbSAnLi9zd2FsLXBvcnRhbC10YXJnZXRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3dhbENvbXBvbmVudCB9IGZyb20gJy4vc3dhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZSc7XG4vKipcbiAqIEEgc3RydWN0dXJhbCBkaXJlY3RpdmUgdGhhdCBsZXRzIHlvdSB1c2UgQW5ndWxhciB0ZW1wbGF0ZXMgaW5zaWRlIG9mIFN3ZWV0QWxlcnRzLlxuICogVGhlcmUgYXJlIGRpZmZlcmVudCB0YXJnZXRhYmxlIHpvbmVzIHByb3ZpZGVkIGJ5IHtAbGluayBTd2FsUG9ydGFsVGFyZ2V0c306IHRpdGxlLCBjb250ZW50LCBjb25maXJtQnV0dG9uLCBldGMsIGJ1dFxuICogeW91IGNhbiBhbHNvIG1ha2UgeW91ciBvd24gdGFyZ2V0IGJ5IGltcGxlbWVudGluZyB7QGxpbmsgU3dhbFBvcnRhbFRhcmdldH0gYW5kIGdpdmluZyBpdCB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqIFRoZSBkZWZhdWx0IHRhcmdldCBpcyB0aGUgYWxlcnQgdGV4dCBjb250ZW50IHpvbmUuXG4gKlxuICogVXNhZ2UgaW4geW91ciBjb21wb25lbnQncyBUeXBlU2NyaXB0IChpZiB5b3UgdXNlIGFub3RoZXIgdGFyZ2V0IHRoYW4ge0BsaW5rIFN3YWxQb3J0YWxUYXJnZXRzLmNvbnRlbnR9KTpcbiAqXG4gKiAgICAgQENvbXBvbmVudCh7IC4uLiB9KVxuICogICAgIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKiAgICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc3dhbFRhcmdldHM6IFN3YWxQb3J0YWxUYXJnZXRzKSB7XG4gKiAgICAgICAgIH1cbiAqICAgICB9XG4gKlxuICogVXNhZ2UgaW4gdGhlIHRlbXBsYXRlOlxuICpcbiAqICAgICA8c3dhbCB0aXRsZT1cIkZpbGwgdGhlIGZvcm1cIiAoY29uZmlybSk9XCJjb25maXJtSGFuZGxlcigpXCI+XG4gKiAgICAgICAgIDwhLS0gVGhpcyBmb3JtIHdpbGwgYmUgZGlzcGxheWVkIGFzIHRoZSBhbGVydCBtYWluIGNvbnRlbnRcbiAqICAgICAgICAgICAgICBUYXJnZXRzIHRoZSBhbGVydCdzIG1haW4gY29udGVudCB6b25lIGJ5IGRlZmF1bHQgLS0+XG4gKiAgICAgICAgIDxmb3JtICpzd2FsUG9ydGFsIFtmb3JtQ29udHJvbF09XCJteUZvcm1cIj5cbiAqICAgICAgICAgICAgIC4uLlxuICogICAgICAgICA8L2Zvcm0+XG4gKlxuICogICAgICAgICA8IS0tIFRoaXMgdGFyZ2V0cyB0aGUgY29uZmlybSBidXR0b24ncyBpbm5lciBjb250ZW50XG4gKiAgICAgICAgICAgICAgTm90aWNlIHRoZSB1c2FnZSBvZiBuZy1jb250YWluZXIgdG8gYXZvaWQgY3JlYXRpbmcgYW4gdXNlbGVzcyBET00gZWxlbWVudCBpbnNpZGUgdGhlIGJ1dHRvbiAtLT5cbiAqICAgICAgICAgPG5nLWNvbnRhaW5lciAqc3dhbFBvcnRhbD1cInN3YWxUYXJnZXRzLmNvbmZpcm1CdXR0b25cIj5cbiAqICAgICAgICAgICAgICBTZW5kICh7eyBzZWNvbmRzTGVmdCB9fSBzZWNvbmRzIGxlZnQpXG4gKiAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICogICAgIDxzd2FsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTd2FsUG9ydGFsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFwcDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlUmVmO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3dlZXRBbGVydDJMb2FkZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzd2FsVGFyZ2V0cztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN3YWxDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBwb3J0YWwgdGFyZ2V0IG9yIG5vdGhpbmcgKHRoZW4gaXQgd2lsbCB0YXJnZXQgdGhlIHRleHQgY29udGVudCB6b25lIGJ5IGRlZmF1bHQpLlxuICAgICAqXG4gICAgICogU2VlIHRoZSB7QGxpbmsgU3dhbFBvcnRhbFRhcmdldHN9IHNlcnZpY2UgdG8gc2VlIHRoZSBhdmFpbGFibGUgdGFyZ2V0cy5cbiAgICAgKiBTZWUgdGhlIGNsYXNzIGRvYyBibG9jayBmb3IgbW9yZSBpbmZvcm1hdGlvbnMuXG4gICAgICovXG4gICAgdGFyZ2V0PzogU3dhbFBvcnRhbFRhcmdldDtcbiAgICAvKipcbiAgICAgKiBIb2xkcyB0aGUgY29tcG9uZW50IHJlZmVyZW5jZSBvZiB0aGUgY29udHJvbGxlZCBTd2FsUG9ydGFsQ29tcG9uZW50IHRvIGRlc3Ryb3kgaXQgd2hlbiBubyBsb25nZXIgbmVlZGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgcG9ydGFsQ29tcG9uZW50UmVmPztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3llZDtcbiAgICBjb25zdHJ1Y3RvcihyZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBpbmplY3RvcjogSW5qZWN0b3IsIGFwcDogQXBwbGljYXRpb25SZWYsIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBzd2VldEFsZXJ0MkxvYWRlcjogU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlLCBzd2FsVGFyZ2V0czogU3dhbFBvcnRhbFRhcmdldHMsIHN3YWxDb21wb25lbnQ6IFN3YWxDb21wb25lbnQpO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gdGhlIHRoZSBTd2VldEFsZXJ0IGFwcGVhcmFuY2UvZGlzYXBwZWFyYW5jZSBldmVudHMgdG8gY3JlYXRlL2Rlc3Ryb3kgdGhlIFN3YWxQb3J0YWxDb21wb25lbnRcbiAgICAgKiB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgY29uc3VtZXIncyB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNpZ25hbCBhbnkge0BsaW5rIGRlc3Ryb3llZH0gY29uc3VtZXIgdGhhdCB0aGlzIGlzIG92ZXIsIHNvIHRoZXkgY2FuIHVuc3Vic2NyaWJlIGZyb20gdGhlXG4gICAgICogcGFyZW50IFN3YWxDb21wb25lbnQgZXZlbnRzLlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhpcyByZW5kZXIgaG9vayBydW5zIDEuLm4gdGltZXMgKHBlciBtb2RhbCBpbnN0YW5jZSksIGp1c3QgYmVmb3JlIHRoZSBtb2RhbCBpcyBzaG93biAoYW5kIGFsc28gYmVmb3JlIHRoZVxuICAgICAqIHtAbGluayBiZWZvcmVPcGVuSG9va30pLCBvciBhZnRlciBTd2FsLnVwZGF0ZSgpIGlzIGNhbGxlZC5cbiAgICAgKiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byByZW5kZXIsIG9yIHJlLXJlbmRlciwgb3VyIHBvcnRhbCBjb250ZW50cy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlckhvb2s7XG4gICAgLyoqXG4gICAgICogVGhpcyBiZWZvcmVPcGVuIGhvb2sgcnVucyBvbmNlIChwZXIgbW9kYWwgaW5zdGFuY2UpLCBqdXN0IGJlZm9yZSB0aGUgbW9kYWwgaXMgc2hvd24gb24gdGhlIHNjcmVlbi5cbiAgICAgKiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byBkZWNsYXJlIG91ciBkZXRhY2hlZCB2aWV3IHRvIHRoZSBBbmd1bGFyIGFwcC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGJlZm9yZU9wZW5Ib29rO1xuICAgIC8qKlxuICAgICAqIFRoaXMgYWZ0ZXJDbG9zZSBob29rIHJ1bnMgb25jZSAocGVyIG1vZGFsIGluc3RhbmNlKSwganVzdCBhZnRlciB0aGUgbW9kYWwgY2xvc2luZyBhbmltYXRpb24gdGVybWluYXRlZC5cbiAgICAgKiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byBkZXRhY2ggYW5kIGRlc3Ryb3kgb3VyIGNvbnRlbnQsIHRoYXQgaXMgbm90IHZpc2libGUgYW55bW9yZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlc3Ryb3lIb29rO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHtAbGluayBTd2FsUG9ydGFsQ29tcG9uZW50fSBhbmQgZ2l2ZXMgaXQgdGhlIGN1c3RvbWVyJ3MgdGVtcGxhdGUgcmVmLlxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlUG9ydGFsQ29tcG9uZW50O1xufVxuIl19