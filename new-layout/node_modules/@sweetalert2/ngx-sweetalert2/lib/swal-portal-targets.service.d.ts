import Swal, { SweetAlertOptions } from 'sweetalert2';
import * as ɵngcc0 from '@angular/core';
export interface SwalPortalTarget {
    options?: SweetAlertOptions;
    element(swal: typeof Swal): HTMLElement;
}
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
export declare class SwalPortalTargets {
    /**
     * Targets the modal close button block contents.
     */
    readonly closeButton: SwalPortalTarget;
    /**
     * Targets the modal title block contents.
     */
    readonly title: SwalPortalTarget;
    /**
     * Targets the modal text block contents (that is another block inside the first content block, so you can still
     * use other modal features like Swal inputs, that are situated inside that parent content block).
     */
    readonly content: SwalPortalTarget;
    /**
     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
     * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
     *     performance of everyone, for a relatively rare use case.
     */
    readonly actions: SwalPortalTarget;
    /**
     * Targets the confirm button contents, replacing the text inside it (not the button itself)
     */
    readonly confirmButton: SwalPortalTarget;
    /**
     * Targets the cancel button contents, replacing the text inside it (not the button itself)
     */
    readonly cancelButton: SwalPortalTarget;
    /**
     * Targets the modal footer contents.
     */
    readonly footer: SwalPortalTarget;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalPortalTargets>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInN3YWwtcG9ydGFsLXRhcmdldHMuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTd2FsLCB7IFN3ZWV0QWxlcnRPcHRpb25zIH0gZnJvbSAnc3dlZXRhbGVydDInO1xuZXhwb3J0IGludGVyZmFjZSBTd2FsUG9ydGFsVGFyZ2V0IHtcbiAgICBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnM7XG4gICAgZWxlbWVudChzd2FsOiB0eXBlb2YgU3dhbCk6IEhUTUxFbGVtZW50O1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9iamVjdCBvZiB0YXJnZXRzIGZvciA8c3dhbD4gcG9ydGFscyAodXNlIHdpdGggKnN3YWxQb3J0YWwgZGlyZWN0aXZlKS5cbiAqIFdlIG11c3QgdXNlIHRodW5rcyB0byBhY2Nlc3MgdGhlIFN3YWwuKiBmdW5jdGlvbnMgbGlzdGVkIGJlbG93LCBiZWNhdXNlIHRoZXkgZ2V0IGNyZWF0ZWQgYWZ0ZXIgdGhlIGZpcnN0IG1vZGFsIGlzXG4gKiBzaG93biwgc28gdGhpcyBvYmplY3QgbGV0cyB1cyByZWZlcmVuY2UgdGhvc2UgZnVuY3Rpb25zIHNhZmVseSBhbmQgaW4gYSBzdGF0aWNhbGx5LXR5cGVkIG1hbm5lci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3dhbFBvcnRhbFRhcmdldHMge1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIGNsb3NlIGJ1dHRvbiBibG9jayBjb250ZW50cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBjbG9zZUJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldDtcbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCB0aXRsZSBibG9jayBjb250ZW50cy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aXRsZTogU3dhbFBvcnRhbFRhcmdldDtcbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCB0ZXh0IGJsb2NrIGNvbnRlbnRzICh0aGF0IGlzIGFub3RoZXIgYmxvY2sgaW5zaWRlIHRoZSBmaXJzdCBjb250ZW50IGJsb2NrLCBzbyB5b3UgY2FuIHN0aWxsXG4gICAgICogdXNlIG90aGVyIG1vZGFsIGZlYXR1cmVzIGxpa2UgU3dhbCBpbnB1dHMsIHRoYXQgYXJlIHNpdHVhdGVkIGluc2lkZSB0aGF0IHBhcmVudCBjb250ZW50IGJsb2NrKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250ZW50OiBTd2FsUG9ydGFsVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGFjdGlvbnMgYmxvY2sgY29udGVudHMsIHdoZXJlIGFyZSB0aGUgY29uZmlybSBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gYSBub3JtYWwgdGltZS5cbiAgICAgKiAvIVxcIFdBUk5JTkc6IHVzaW5nIHRoaXMgdGFyZ2V0IGRlc3Ryb3lzIHNvbWUgb2YgdGhlIG5hdGl2ZSBTd2VldEFsZXJ0MiBtb2RhbCdzIERPTSwgdGhlcmVmb3JlLCBpZiB5b3UgdXNlIHRoaXNcbiAgICAgKiAgICAgdGFyZ2V0LCBkbyBub3QgdXBkYXRlIHRoZSBtb2RhbCB2aWEgPHN3YWw+IEBJbnB1dHMgd2hpbGUgdGhlIG1vZGFsIGlzIG9wZW4sIG9yIHlvdSdsbCBnZXQgYW4gZXJyb3IuXG4gICAgICogICAgIFdlIGNvdWxkIHdvcmthcm91bmQgdGhhdCBpbmNvbnZlbmllbnQgaW5zaWRlIHRoaXMgaW50ZWdyYXRpb24sIGJ1dCB0aGF0J2QgYmUgZGV0cmltZW50YWwgdG8gbWVtb3J5IGFuZFxuICAgICAqICAgICBwZXJmb3JtYW5jZSBvZiBldmVyeW9uZSwgZm9yIGEgcmVsYXRpdmVseSByYXJlIHVzZSBjYXNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGlvbnM6IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgY29uZmlybSBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICByZWFkb25seSBjb25maXJtQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGNhbmNlbCBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICByZWFkb25seSBjYW5jZWxCdXR0b246IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgZm9vdGVyIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZvb3RlcjogU3dhbFBvcnRhbFRhcmdldDtcbn1cbiJdfQ==