import { __assign, __awaiter, __decorate, __generator, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken } from './di';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe.
 *
 * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,
 *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.
 *
 * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.
 *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.
 *     If you are really concerned about performance and/or don't care about the API and its convenient integration
 *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)
 *
 * /!\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy
 *     (but without "on*" prefix to respect community standards).
 *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be
 *     multiple listeners and we need the values they can/must return.
 */
import * as Éµngcc0 from '@angular/core';
var SwalComponent = /** @class */ (function () {
    function SwalComponent(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.moduleLevelFireOnInit = moduleLevelFireOnInit;
        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;
        /**
         * Emits an event when the modal DOM element has been created.
         * Useful to perform DOM mutations before the modal is shown.
         */
        this.beforeOpen = new EventEmitter();
        /**
         * Emits an event when the modal is shown.
         */
        this.open = new EventEmitter();
        /**
         * Emits an event when the modal DOM is rendered.
         */
        this.render = new EventEmitter();
        /**
         * Emits an event when the modal will be closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.close = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions
         * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by
         * another popup.
         */
        this.destroy = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     <swal (confirm)="handleConfirm($event)"></swal>
         *
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.
         * The reason is `undefined` when {@link dismiss} is called.
         *
         * Example:
         *     <swal (cancel)="handleCancel($event)"></swal>
         *
         *     public handleCancel(reason: DismissReason | undefined): void {
         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
        /**
         * This Set retains the properties that have been changed from @Inputs, so we can know precisely
         * what options we have to send to {@link Swal.fire}.
         */
        this.touchedProps = new Set();
        /**
         * A function of signature `(propName: string): void` that adds a given property name to the list of
         * touched properties, ie. {@link touchedProps}.
         */
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        /**
         * Is the SweetAlert2 modal represented by this component currently opened?
         */
        this.isCurrentlyShown = false;
    }
    Object.defineProperty(SwalComponent.prototype, "swalOptions", {
        /**
         * Computes the options object that will get passed to SweetAlert2.
         * Only the properties that have been set at least once on this component will be returned.
         * Mostly for internal usage.
         */
        get: function () {
            var _this = this;
            var options = {};
            //=> We will compute the options object based on the option keys that are known to have changed.
            //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially
            //   avoiding side effects.
            this.touchedProps.forEach(function (prop) {
                options[prop] = _this[prop];
            });
            return options;
        },
        /**
         * An object of SweetAlert2 native options, useful if:
         *  - you don't want to use the @Inputs for practical/philosophical reasons ;
         *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
         *
         * /!\ Please note that setting this property does NOT erase what has been set before unless you specify the
         *     previous properties you want to erase again.
         *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.
         *
         * /!\ Be aware that the options defined in this object will override the @Inputs of the same name.
         */
        set: function (options) {
            //=> Update properties
            Object.assign(this, options);
            //=> Mark changed properties as touched
            var touchedKeys = Object.keys(options);
            touchedKeys.forEach(this.markTouched);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwalComponent.prototype, "swalVisible", {
        get: function () {
            return this.isCurrentlyShown;
        },
        set: function (visible) {
            visible ? this.fire() : this.dismiss();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Angular lifecycle hook.
     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there
     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,
     * causing no delay.
     */
    SwalComponent.prototype.ngOnInit = function () {
        //=> Preload SweetAlert2 library in case this component is activated.
        this.sweetAlert2Loader.preloadSweetAlertLibrary();
    };
    /**
     * Angular lifecycle hook.
     * Fires the modal, if the component or module is configured to do so.
     */
    SwalComponent.prototype.ngAfterViewInit = function () {
        var fireOnInit = this.swalFireOnInit === undefined
            ? this.moduleLevelFireOnInit
            : this.swalFireOnInit;
        fireOnInit && this.fire();
    };
    /**
     * Angular lifecycle hook.
     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.
     */
    SwalComponent.prototype.ngOnChanges = function (changes) {
        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can
        //   send it with the next fire() or update() calls.
        Object.keys(changes)
            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter
            .filter(function (prop) { return !prop.startsWith('swal'); })
            .forEach(this.markTouched);
        //=> Eventually trigger re-render if the modal is open.
        void this.update();
    };
    /**
     * Angular lifecycle hook.
     * Closes the SweetAlert when the component is destroyed.
     */
    SwalComponent.prototype.ngOnDestroy = function () {
        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.
        var dismissOnDestroy = this.swalDismissOnDestroy === undefined
            ? this.moduleLevelDismissOnDestroy
            : this.swalDismissOnDestroy;
        dismissOnDestroy && this.dismiss();
    };
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     */
    SwalComponent.prototype.fire = function () {
        return __awaiter(this, void 0, void 0, function () {
            var swal, options, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        options = __assign(__assign({}, this.swalOptions), { 
                            //=> Handle modal lifecycle events
                            onBeforeOpen: function (modalElement) {
                                _this.beforeOpen.emit({ modalElement: modalElement });
                            }, onOpen: function (modalElement) {
                                _this.isCurrentlyShown = true;
                                _this.open.emit({ modalElement: modalElement });
                            }, onRender: function (modalElement) {
                                _this.render.emit({ modalElement: modalElement });
                            }, onClose: function (modalElement) {
                                _this.isCurrentlyShown = false;
                                _this.close.emit({ modalElement: modalElement });
                            }, onAfterClose: function () {
                                _this.afterClose.emit();
                            }, onDestroy: function () {
                                _this.destroy.emit();
                            } });
                        return [4 /*yield*/, swal.fire(options)];
                    case 2:
                        result = _a.sent();
                        //=> Emit on (confirm) or (cancel)
                        if ('value' in result) {
                            this.confirm.emit(result.value);
                        }
                        else {
                            this.cancel.emit(result.dismiss);
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Closes the modal, if opened.
     *
     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).
     *               If the argument is not passed, (dimiss) will emit `undefined`.
     *               See {@link Swal.close}
     */
    SwalComponent.prototype.dismiss = function (result) {
        return __awaiter(this, void 0, void 0, function () {
            var swal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isCurrentlyShown)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        swal.close(result);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.
     * If the modal is not opened, the component options will simply be updated and that's it.
     *
     * /!\ Please note that not all SweetAlert2 options are updatable while the modal is opened.
     *
     * @param options
     */
    SwalComponent.prototype.update = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var swal, allOptions, updatableOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options) {
                            this.swalOptions = options;
                        }
                        if (!this.isCurrentlyShown)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        allOptions = this.swalOptions;
                        updatableOptions = Object.keys(allOptions)
                            .filter(function (key) { return swal.isUpdatableParameter(key); })
                            .reduce(function (obj, key) {
                            obj[key] = allOptions[key];
                            return obj;
                        }, {});
                        swal.update(updatableOptions);
                        return [2 /*return*/];
                }
            });
        });
    };
    SwalComponent.ctorParameters = function () { return [
        { type: SweetAlert2LoaderService },
        { type: Boolean, decorators: [{ type: Inject, args: [fireOnInitToken,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [dismissOnDestroyToken,] }] }
    ]; };
    __decorate([
        Input()
    ], SwalComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "titleText", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "text", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "html", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "footer", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "iconHtml", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "backdrop", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "toast", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "target", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "input", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "padding", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "background", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "position", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "grow", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "showClass", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "hideClass", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "customClass", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "timer", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "timerProgressBar", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "animation", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "heightAuto", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "allowOutsideClick", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "allowEscapeKey", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "allowEnterKey", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "stopKeydownPropagation", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "keydownListenerCapture", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "showConfirmButton", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "showCancelButton", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "confirmButtonText", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "cancelButtonText", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "confirmButtonColor", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "cancelButtonColor", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "confirmButtonAriaLabel", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "cancelButtonAriaLabel", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "buttonsStyling", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "reverseButtons", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "focusConfirm", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "focusCancel", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "showCloseButton", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "closeButtonHtml", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "closeButtonAriaLabel", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "showLoaderOnConfirm", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "preConfirm", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "imageUrl", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "imageWidth", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "imageHeight", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "imageAlt", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputPlaceholder", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputValue", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputOptions", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputAutoTrim", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputAttributes", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "inputValidator", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "validationMessage", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "progressSteps", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "currentProgressStep", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "progressStepsDistance", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "scrollbarPadding", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "swalOptions", null);
    __decorate([
        Input()
    ], SwalComponent.prototype, "swalFireOnInit", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "swalDismissOnDestroy", void 0);
    __decorate([
        Input()
    ], SwalComponent.prototype, "swalVisible", null);
    __decorate([
        Output()
    ], SwalComponent.prototype, "beforeOpen", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "open", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "render", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "close", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "afterClose", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "destroy", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "confirm", void 0);
    __decorate([
        Output()
    ], SwalComponent.prototype, "cancel", void 0);
    SwalComponent = __decorate([ __param(1, Inject(fireOnInitToken)),
        __param(2, Inject(dismissOnDestroyToken))
    ], SwalComponent);
SwalComponent.Éµfac = function SwalComponent_Factory(t) { return new (t || SwalComponent)(Éµngcc0.ÉµÉµdirectiveInject(SweetAlert2LoaderService), Éµngcc0.ÉµÉµdirectiveInject(fireOnInitToken), Éµngcc0.ÉµÉµdirectiveInject(dismissOnDestroyToken)); };
SwalComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: SwalComponent, selectors: [["swal"]], inputs: { swalOptions: "swalOptions", swalVisible: "swalVisible", title: "title", titleText: "titleText", text: "text", html: "html", footer: "footer", icon: "icon", iconHtml: "iconHtml", backdrop: "backdrop", toast: "toast", target: "target", input: "input", width: "width", padding: "padding", background: "background", position: "position", grow: "grow", showClass: "showClass", hideClass: "hideClass", customClass: "customClass", timer: "timer", timerProgressBar: "timerProgressBar", animation: "animation", heightAuto: "heightAuto", allowOutsideClick: "allowOutsideClick", allowEscapeKey: "allowEscapeKey", allowEnterKey: "allowEnterKey", stopKeydownPropagation: "stopKeydownPropagation", keydownListenerCapture: "keydownListenerCapture", showConfirmButton: "showConfirmButton", showCancelButton: "showCancelButton", confirmButtonText: "confirmButtonText", cancelButtonText: "cancelButtonText", confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", confirmButtonAriaLabel: "confirmButtonAriaLabel", cancelButtonAriaLabel: "cancelButtonAriaLabel", buttonsStyling: "buttonsStyling", reverseButtons: "reverseButtons", focusConfirm: "focusConfirm", focusCancel: "focusCancel", showCloseButton: "showCloseButton", closeButtonHtml: "closeButtonHtml", closeButtonAriaLabel: "closeButtonAriaLabel", showLoaderOnConfirm: "showLoaderOnConfirm", preConfirm: "preConfirm", imageUrl: "imageUrl", imageWidth: "imageWidth", imageHeight: "imageHeight", imageAlt: "imageAlt", inputPlaceholder: "inputPlaceholder", inputValue: "inputValue", inputOptions: "inputOptions", inputAutoTrim: "inputAutoTrim", inputAttributes: "inputAttributes", inputValidator: "inputValidator", validationMessage: "validationMessage", progressSteps: "progressSteps", currentProgressStep: "currentProgressStep", progressStepsDistance: "progressStepsDistance", scrollbarPadding: "scrollbarPadding", swalFireOnInit: "swalFireOnInit", swalDismissOnDestroy: "swalDismissOnDestroy" }, outputs: { beforeOpen: "beforeOpen", open: "open", render: "render", close: "close", afterClose: "afterClose", destroy: "destroy", confirm: "confirm", cancel: "cancel" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature], decls: 0, vars: 0, template: function SwalComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(SwalComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'swal',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: SweetAlert2LoaderService }, { type: Boolean, decorators: [{
                type: Inject,
                args: [fireOnInitToken]
            }] }, { type: Boolean, decorators: [{
                type: Inject,
                args: [dismissOnDestroyToken]
            }] }]; }, { beforeOpen: [{
            type: Output
        }], open: [{
            type: Output
        }], render: [{
            type: Output
        }], close: [{
            type: Output
        }], afterClose: [{
            type: Output
        }], destroy: [{
            type: Output
        }], confirm: [{
            type: Output
        }], cancel: [{
            type: Output
        }], swalOptions: [{
            type: Input
        }], swalVisible: [{
            type: Input
        }], title: [{
            type: Input
        }], titleText: [{
            type: Input
        }], text: [{
            type: Input
        }], html: [{
            type: Input
        }], footer: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconHtml: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], toast: [{
            type: Input
        }], target: [{
            type: Input
        }], input: [{
            type: Input
        }], width: [{
            type: Input
        }], padding: [{
            type: Input
        }], background: [{
            type: Input
        }], position: [{
            type: Input
        }], grow: [{
            type: Input
        }], showClass: [{
            type: Input
        }], hideClass: [{
            type: Input
        }], customClass: [{
            type: Input
        }], timer: [{
            type: Input
        }], timerProgressBar: [{
            type: Input
        }], animation: [{
            type: Input
        }], heightAuto: [{
            type: Input
        }], allowOutsideClick: [{
            type: Input
        }], allowEscapeKey: [{
            type: Input
        }], allowEnterKey: [{
            type: Input
        }], stopKeydownPropagation: [{
            type: Input
        }], keydownListenerCapture: [{
            type: Input
        }], showConfirmButton: [{
            type: Input
        }], showCancelButton: [{
            type: Input
        }], confirmButtonText: [{
            type: Input
        }], cancelButtonText: [{
            type: Input
        }], confirmButtonColor: [{
            type: Input
        }], cancelButtonColor: [{
            type: Input
        }], confirmButtonAriaLabel: [{
            type: Input
        }], cancelButtonAriaLabel: [{
            type: Input
        }], buttonsStyling: [{
            type: Input
        }], reverseButtons: [{
            type: Input
        }], focusConfirm: [{
            type: Input
        }], focusCancel: [{
            type: Input
        }], showCloseButton: [{
            type: Input
        }], closeButtonHtml: [{
            type: Input
        }], closeButtonAriaLabel: [{
            type: Input
        }], showLoaderOnConfirm: [{
            type: Input
        }], preConfirm: [{
            type: Input
        }], imageUrl: [{
            type: Input
        }], imageWidth: [{
            type: Input
        }], imageHeight: [{
            type: Input
        }], imageAlt: [{
            type: Input
        }], inputPlaceholder: [{
            type: Input
        }], inputValue: [{
            type: Input
        }], inputOptions: [{
            type: Input
        }], inputAutoTrim: [{
            type: Input
        }], inputAttributes: [{
            type: Input
        }], inputValidator: [{
            type: Input
        }], validationMessage: [{
            type: Input
        }], progressSteps: [{
            type: Input
        }], currentProgressStep: [{
            type: Input
        }], progressStepsDistance: [{
            type: Input
        }], scrollbarPadding: [{
            type: Input
        }], swalFireOnInit: [{
            type: Input
        }], swalDismissOnDestroy: [{
            type: Input
        }] }); })();
    return SwalComponent;
}());
export { SwalComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,